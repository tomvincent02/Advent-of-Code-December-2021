#Day 11
#Dumbo Octupus
#data = '2682551651322313426358484714127438334862873132157364152335745564726843668345644585823461124617588236'
#insert = []
#for d in data:
#    insert.append(int(d))
#print(insert)
#iteration = 100
#
#def do_it_right(graph, num_of_iterations):
#    counter = 0
#    flash_counter = 0
#    while num_of_iterations != counter:
#        for each in graph:
#            graph[each] += 1 #add one each time through the
#            counter += 1
#        for num in graph:
#            if num == 9:
#                flash_counter += 1
#                nbrs = [graph[num - 1], graph[num + 1], graph[num + 10], graph[num - 10], graph[num - 11], graph[num - 9], graph[num + 11], graph[num + 9]]
#                for nbr in nbrs:
#                    if nbr == 9:
#                        graph[nbr] = 0
#                        counter += 1
#                        flash_counter += 1
#                        return do_it_right(graph, counter)
#                    else:
#                        graph[nbr] += 1
#    return graph, flash_counter

#print(do_it_right(insert, iteration))
#print(low_points(inputs,10))

#Day 13
#Transparent Origami
#lst is a list of lists:
#set an empty dictionary named frank
#set value as the length of the lst minus 1
#for line in range(0, len(lst)/2):
    #line + lst[value] = frank #needs work
    #value -= 1
#return frank
#screw = '6,10,0,14,9,10,0,3,10,4,4,11,6,0,6,12,4,1,0,13,10,12,3,4,3,0,8,4,1,10,2,14,8,10,9,0'
#new = screw.split(',')
#print(new)
#almost= []
#for each in new:
#    almost.append(int(each))
#print(almost)
#final = []
#for idx in range(len(almost)-1):
#    final.append(list(almost[idx] and almost[idx+1]))
#print(final)
#
#def fold_horizontally(lsts):
#    frank = []
#    value = len(lsts) - 1
#    for idx in range(0,len(lsts) / 2):
#        for num in zip(lsts[idx], lsts[value]):
#            frank.append(lst(num))
#    return frank
#
#
#print(fold_horizontally())

#Day 14
#Extended Polymerization
#symbol = grab first two letters
#def code_cracker(data):
#    dictionary = {'range of all values': 'b'}
#    for idx in range(0,len(data)-1,1):
#        symbol = str((data[idx]) +(data[idx + 1]))  #symbol equals the number and the next number
#        if symbol in dictionary:  #if symbol in dictionary
#            data.append(dictionary[symbol])[data[idx]] #manipulating the data input to add the symbols value after the data idx
#            if len(data) >= 2:
#                return code_cracker(data[symbol[1]:])
#            else:
#                return data
#print(code_cracker('range of all values'))

#Day 15
#Chiton
#knight = '9117126765954991531361287887952293985228945954968719768599113229933177321218646689996911474536732399922375987895222167617157991179996238797915121999571621769969612793867383148929139569691996993225498935415769111281551212991132221295492879595883826226195137191339241511628412857788212882757249611199446559133231375896721321444531355921461395859117937697179547219275288311254734149251973431135281269159167626756281991639568999788198299233242411162143513214125987186154269347299213567991719231777429312882491398981679996962948348613876638831586273965693819921493539129311219476192347313249593544651333937357179973989691178482439911993891132125811578668959789312252688675899921989453929516192661843919197461969646991666854759735897921191299811185914413873222828216254162995926522527989927586911874621134399534475494772538817961883283615842968368942536816735832981511693751421161722997916498331531997281276746781992592141396343937891111468593431876292615191122987921959192389783817917672173839828296719999913894396612412329181933299392962863816999394596212862113471799514914695579151498319899587143311968358191631889813824486854899163678225157283791792729998936929499436614582361538725999994714961199993339719423138538191938542116779987951211999142299782419116287869943982658286621789697471829675879813256969918169612635919548155811395285841292991999289592191323888488482738759517165927387213837967953359149939826215636818899396279314779413361988428972121925439314895977461583982391269722275899948281929992668741998199239119999431871112499961947311948258837213919913418234952325331319559453486297114898498112763961529523942391996366199899534521664169397791537718931281915482492984852477184882729913581181183683871721197216725882799936394789725113189459231561622315481695322941398824921798115348988242934338783398963998292816524668577741241713481448273631853599957636719273318298313692157194988481619656618295375699986293229982111266428197211912794147985394111857978118861928679141358926831423399492495821937215954141815165938843991189996919983165131296655546152766175735189619686932263719727614238317981761991694811958961555928271245541174192885889591799159659816793825199835199263296631112197219243356537825265953316397365572292237623569971749534448114166281871191392113461499394829983183215364993969978949914811143949468267131196711817837911739943714351899984929519851773868913227612461153215798132465546993696939393598438941581694619582924588531988611314975227128981355369857749392159437189417619958138722575117969525489129526982149281176494171912961484146172297914617789269279916491183321931896459199313337999296516111112563821934323948997799264224813159346999411399838943383312421273299827893943165318837481279123791791511293941173182698413296717121319418188693999815688934899313263953713912168172818271551818717766878855831155624836851981739883487945215963719198784737471379969179277868598515118316322599188161999121929759919226269921588999682921791549721198975411833441855451992711448854178524643844896829916982297819936288191299877891985362698715838913823274968133179284798911359494966988815194363212932432919874494823783147238991491253159249197171785471818386394941891811972928721991129288661918914759963528482999135878238718582595829862329519865369135288219448786829929793464873166111814121195338788926799919935991369615497631215917839967981681589392981969115279279799512993478671319169869899122974279818523999188797846172136178313999941159938945959179294138969239179979116832992382376931615216191737645985219958991213181919356193636994659818992764919621998798164158388197539871631711157429846327731396437141244238124389792786718327351712492271297983335154292724119492723817435886686622726342678961431194861181943919219325985949492567822199983611615969192683772299938395985999612215165898512918991226521466478629198994327187426227652737813119659981331871191692439981858152149996239891719911125612991149875591574422711878572239393988875812296611285397519895686411153557723621141397739842873293893291171239375827982363878288271818119612819951945591497886851191159898589829318175171191121864221668917938188191918889131945137655148774719314314231916391393343198689891242141595511173588299971817296229949357949267411491772862121912417767853191411964865383988989611452288776982343996113214944462969295774954793993299993699942997972796159331176212479724158168873194918668293947691729969454522219681934815696683254979985396412179196973912658471991267992749799921778773399997211873384993858943916887571424377839628315395229914399726112147897399599948122361917993319944114926999815642921981378665997811872996791991293979594191187423719668412662321179315191822117357722336589789129663849119319162681892631961278134992735981222659837384699153671196154657483871553999481952589868781983253212895659317943698823692358924999677389297641337293459814384114353897968978424818882635937221462858992492131591882224132111715398219413268998943235521519397338619318551991613965986729251931227298116785219678798129415961129132962117447414231514911889199976268982962931391589393894968615634761849729488241113249692859781541128929154921239399482171919616671311149987887281336195251291973881413496248383216161516996491666581623142496212395278683489196157989191496882184977694657369888613323787381296879697169933713669182431457681454421637697811444498181939199835111914771199473695128994138141569361498428259585953645267181588319371581711189818471818895122114868875787691911889164956117362787871116899195295199538719355396986921185166327498961696167149824249898669154733187559686729698991917376399477497722122986986813296591457321959141831593464344926343328499972144251218755598939917618892841936893788892859974785574272161914919594673997161317368638349972858474699479813292211191216314518583592781129989799717793478599178914121281699291849128613311186981658875985491999295564479997199276351879948937812737819884231712514317598171197729789938279399813118253511172492912956723983597489964817994555296613311519883741287179111986959979697456791979798577971695957796829731637773612123812799821266989181491797352197987941284655891182989484469979979916419291188989858922622412282848854879895683682895556994282719998373419816771153259169527893784917933283187249248159389181162214293993117317294558828197478791898512651984411164371932316593981955647388164661498291113142494888583381924456899524788279716191973597227394711639844831189388198174111229579931941559731919911718784559397791319484147358127936112842868197886118192815896781639392422638199327835198519915116884914531238461641485172217818929921255247173729771179285968616799114641477457412251293698829869979122228625995879148499396737898889638982142482362649629364938991956974341766647814211431481912872945169112497973971543521165691167967812619944314543965261991418191691638691979648438599864241996524819196398955555596467939681172244613591219274954399948515891949867457671991191146713643837513938479919124381959615799437231597888611882549928192193269491499894796168339169992697987279984375377898378971419937879778899193316197921989749792996912114532561389481553114819886189128977113942233859696272497289193327129411323929311817917155912734353112671412926295289637499199748182125918421718973999673882616938889788112781219151398836281824826992487716291785514764768419996341848811711253234279771973719514427291227341994852889823521398426221691191485392241289173798122618919833488828229429939688841396332965715163197647628152641139849686744156597123337976812556496712899712377996725141179673886293898974248697199412641236288717399983269493559587293483647122119669723819651859959163598151196428556377299359679455191955819191599918132519219337868593149232919229632589381629786882829918422291688492654545413817224757971326278647211536112291768252193611122141141987456151995228147899662196198292971249673769196931861972531994792913285496999695698693139738979739822998883371946778731118191892698411451591196677239927841375111225942599678485581223981879979373895686962476186396617153789993785491593363844883257756687449691989219491112997345159239662975884314199938273928726154994672388219274184271732972386957524972971338913988119687169636991229178984184952396926742299916161189181478784198149885986698995941939926613212294592519219339526411895425132634987381916972671952591622841352911897658739656133993374998249925588923834411295191679584338888166329446889897917992657571924411918211122474698626225978191978983332813388675458997571911911591189133134719817996136961827365281919585249951943324961199127817831966299817162374429681169848119948149387865498964127721191255564587622475957561257121498181571237477213949326616891753921235614453987329817718946743996743859153235945497911182299475311931154529515111211948114624455572817339939811952455255144919686927246823239177969193595165495692229377512838877269684512845584579449859978821874861447619993713532967291991291913489792522984891428912198694954242581116372493125153458391119899284779677645941598268183978663819916982276753479499319197372475857939168321499153862716767719999947324714971881142347989981393496624535728827564155699898829452381969999917228315133939297998552576856499522899955611429219632971922999925793227198344788279519392431572557698658917299489991778819185473997931348945194179398285911966339592984448279733147319112987118759793419159816857586286875932941481119368122639419833371776521998373714251159949852912988542289913788852852377481171299711891391612186152837589292114364228279987512133922694549781995892291293468219758836661591112944171896138232418447617886488994219813367953852715989949889917113565159944989971145919998791266421889855551242212544911939312439931545382428359422871391568759927877629148945198935792824814171263939663155111239878571784635161699922837869119597676981574465698751311821863748892852116848383995886488813275869571998747921421678326187959195939552459462159697493178995499391649397819748283891211961198885189675761681423122591798322135234799979215759171724989419131318722297222491939131'
#new_data = int(x) for x in str(n)
#print(new_data)
#
#class Risk:
#    """
#    current_location = starting position of the graph first iteration
#    box_size = size of graph about to be traversed
#    """
#    def __init__(self, box_size, current_location):
#        self._box_size = box_size
#        self._current_location = current_location
#
#    def neighbors(self):
#        if (self._current_location[0] == 0 and self._current_location[1] == 0):
#            return 2, '0,0'
#        if (self._current_location == self._box_size[0] and self._current_location == self._box_size[1]):
#            return 'DONE'
#        if self._current_location[0] == 0:
#            return 3, 'top row'
#
#        if self._current_location[1] == 0:
#            return 3, 'first column'
#        if self._current_location == self._box_size[0]:
#            return 3, 'bottom row'
#        if self._current_location != self._box_size[1]:
#            return 3, 'last column'
#        else:
#            return 4
#
#    def check_surroundings(self):
#        nbr = neighbors(self._current_location)
#parses data from a block of data to 10x10

#Day 15 Continued

#def dijkstras_algorithm(start_node, new_lst, graph):
#    """
#    :param start_node: where starting
#    :param new_lst: array of nodes in graph
#    :return: visited_tracker: dictionary containing distance from start_node to every node, also the previous vertex
#    """
#    visited_tracker = {start_node: 0}
#    for node in new_lst:
#        visited_tracker[node] = [None, None]
#    for node in start_node #neighbors:
#        shortest_distance = #distance from the start_node to node
#        #if the distance stat_node to node < shortest_distance:
#            update shortest_distance to equal that nodes distance from the start_node
#            update visited_tracker[0] with shortest_distacne and start_node = previous vertex
#        if
#    dijkstras_algorithm(shortest_distance,new_lst, graph)


#skipped day 16


#Day 17
#After each iteration the x position increased by x velo and same with y (0,0)
#the x velo changes one closer to zero, does not change if it is zero
#y velo decreases by 1

#define a function that takes the (x, y velo, x and y position)
    #empty list
    #while the x,y position is not in the box located from (124,-86) to (174,-123):
        #x_velo += 0
        #y_velo += 0
        #if x_velo > 1:
            #-1 += x_velo
        #if the x <1:
            #1+=x_velo
        #else:
            #break
        #-1 += y_velo
        #add y_position to the empty list initialized
        #return max(list)
#
#def max_height(x_velo, y_velo):
#    """
#    :param x_velo: positive value signifying how much the object is moving horizontal
#    :param y_velo: vertical
#    :return: max height of the given trajectory in the input
#    """
#    lst = []
#    x_pos = 0
#    y_pos = 0
#    while not (124 < x_pos < 174) and not (-86 > y_pos > -123):
#         += x_velo
#        0 += y_velo
#        if x_velo > 1:
#            -1 += x_velo
#        if x_velo < 1:
#            1 += x_velo
#        else:
#            break
#        -1 += y_velo
#        lst.append(y_velo)
#    return max(list)
#print(max_height(10,10))

        




